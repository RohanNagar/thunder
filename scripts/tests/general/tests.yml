config:
  target: "http://localhost:8080"
  plugins:
    expect: {}
  phases:
    - name: dynamodb-functional-test
      duration: 1
      arrivalRate: 1
  variables:
    # Set to false to skip the metrics test
    testMetrics: true

scenarios:
  - name: dynamodb
    flow:

      # -------------
      # Create
      # -------------
      - log: "\nAttempting to create a new user..."
      - post:
          url: '/users'
          auth:
            user: application
            pass: secret
          json:
            email:
              address: success@simulator.amazonses.com
            password: 5f4dcc3b5aa765d61d8327deb882cf99
            uniqueID: ABC123
            attributes:
              - hello
              - world
          capture:
            - json: $.email.address
              as: email
            - json: $.creationTime
              as: creationOriginal
          expect:
            - statusCode: 201
            - hasProperty: creationTime
            - hasProperty: lastUpdateTime
            - equals:
                - "{{ email }}"
                - "success@simulator.amazonses.com"

      - log: "\nChecking for CONFLICT when creating a duplicate user..."
      - post:
          url: '/users'
          auth:
            user: application
            pass: secret
          json:
            email:
              address: success@simulator.amazonses.com
            password: 5f4dcc3b5aa765d61d8327deb882cf99
            uniqueID: ABC123
            attributes:
              - hello
              - world
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 409
            - equals:
                - "{{ errorString }}"
                - "A user with the same email address already exists."

      # -------------
      # Get
      # -------------
      - log: "\nChecking for NOT FOUND when getting a nonexistent user..."
      - get:
          url: '/users?email=test@test.com'
          headers:
            password: password
          auth:
            user: application
            pass: secret
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 404
            - equals:
                - "{{ errorString }}"
                - "User test@test.com not found in the database."

      - log: "\nChecking for UNAUTHORIZED when getting a user using an incorrect password..."
      - get:
          url: '/users?email=success@simulator.amazonses.com'
          headers:
            password: incorrectPassword
          auth:
            user: application
            pass: secret
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 401
            - equals:
                - "{{ errorString }}"
                - "Unable to validate user with provided credentials."

      - log: "\nAttempting to get the user..."
      - get:
          url: '/users?email=success@simulator.amazonses.com'
          headers:
            password: 5f4dcc3b5aa765d61d8327deb882cf99
          auth:
            user: application
            pass: secret
          capture:
            - json: $.email.address
              as: email
            - json: $.creationTime
              as: creationGet
          expect:
            - statusCode: 200
            - hasProperty: lastUpdateTime
            - equals:
                - "{{ email }}"
                - "success@simulator.amazonses.com"
            - equals:
                - "{{ creationGet }}"
                - "{{ creationOriginal }}"

      - log: "\nAttempting to get the user with a common password mistake..."
      - get:
          url: '/users?email=success@simulator.amazonses.com'
          headers:
            password: -5f4dcc3b5aa765d61d8327deb882cf99
          auth:
            user: application
            pass: secret
          capture:
            json: $.email.address
            as: email
          expect:
            - statusCode: 200
            - hasProperty: creationTime
            - hasProperty: lastUpdateTime
            - equals:
                - "{{ email }}"
                - "success@simulator.amazonses.com"

      # -------------
      # Send email
      # -------------
      - log: "\nChecking for NOT FOUND when sending an email to a nonexistent user..."
      - post:
          url: '/verify?email=test@test.com'
          headers:
            password: password
          auth:
            user: application
            pass: secret
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 404
            - equals:
                - "{{ errorString }}"
                - "User test@test.com not found in the database."

      - log: "\nChecking for UNAUTHORIZED when sending a verification email with an incorrect password..."
      - post:
          url: '/verify?email=success@simulator.amazonses.com'
          headers:
            password: incorrectPassword
          auth:
            user: application
            pass: secret
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 401
            - equals:
                - "{{ errorString }}"
                - "Unable to validate user with provided credentials."

      - log: "\nAttempting to send a verification email..."
      - post:
          url: '/verify?email=success@simulator.amazonses.com'
          headers:
            password: 5f4dcc3b5aa765d61d8327deb882cf99
          auth:
            user: application
            pass: secret
          capture:
            - json: $.email.address
              as: email
            - json: $.email.verificationToken
              as: verificationToken
          expect:
            - statusCode: 200
            - hasProperty: creationTime
            - hasProperty: lastUpdateTime
            - equals:
                - "{{ email }}"
                - "success@simulator.amazonses.com"

      # -------------
      # Verify email
      # -------------
      - log: "\nChecking for BAD REQUEST when verifying with an incorrect token..."
      - get:
          url: '/verify?email=success@simulator.amazonses.com&token=incorrectToken'
          auth:
            user: application
            pass: secret
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 400
            - equals:
                - "{{ errorString }}"
                - "Incorrect verification token."

      - log: "\nAttempting to verify the user..."
      - get:
          url: '/verify?email=success@simulator.amazonses.com&token={{ verificationToken }}'
          auth:
            user: application
            pass: secret
          capture:
            - json: $.email.address
              as: email
            - json: $.email.verified
              as: verified
          expect:
            - statusCode: 200
            - hasProperty: creationTime
            - hasProperty: lastUpdateTime
            - equals:
                - "{{ email }}"
                - "success@simulator.amazonses.com"
            - equals:
                - "{{ verified }}"
                - true

      - log: "\nAttempting to verify the user and get HTML..."
      - get:
          url: '/verify?email=success@simulator.amazonses.com&token={{ verificationToken }}&response_type=html'
          auth:
            user: application
            pass: secret
          expect:
            - statusCode: 200
            # TODO: verify HTML is as expected

      # -------------
      # Reset verification status
      # -------------
      - log: "\nChecking for NOT FOUND when resetting verification for a nonexistent user..."
      - post:
          url: '/verify/reset?email=test@test.com'
          headers:
            password: test
          auth:
            user: application
            pass: secret
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 404
            - equals:
                - "{{ errorString }}"
                - "User test@test.com not found in the database."

      - log: "\nChecking for UNAUTHORIZED when resetting user verification with an incorrect password..."
      - post:
          url: '/verify/reset?email=success@simulator.amazonses.com'
          headers:
            password: incorrectPassword
          auth:
            user: application
            pass: secret
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 401
            - equals:
                - "{{ errorString }}"
                - "Unable to validate user with provided credentials."

      - log: "\nAttempting to reset the user verification status..."
      - post:
          url: '/verify/reset?email=success@simulator.amazonses.com'
          headers:
            password: 5f4dcc3b5aa765d61d8327deb882cf99
          auth:
            user: application
            pass: secret
          capture:
            - json: $.email.address
              as: email
            - json: $.email.verified
              as: verified
          expect:
            - statusCode: 200
            - hasProperty: creationTime
            - hasProperty: lastUpdateTime
            - equals:
                - "{{ email }}"
                - "success@simulator.amazonses.com"
            - equals:
                - "{{ verified }}"
                - false

      - log: "\nAttempting to send another verification email..."
      - post:
          url: '/verify?email=success@simulator.amazonses.com'
          headers:
            password: 5f4dcc3b5aa765d61d8327deb882cf99
          auth:
            user: application
            pass: secret
          capture:
            - json: $.email.address
              as: email
            - json: $.email.verificationToken
              as: verificationToken
            - json: $.email.verified
              as: verified
          expect:
            - statusCode: 200
            - hasProperty: creationTime
            - hasProperty: lastUpdateTime
            - equals:
                - "{{ email }}"
                - "success@simulator.amazonses.com"
            - equals:
                - "{{ verified }}"
                - false

      - log: "\nAttempting to re-verify the user..."
      - get:
          url: '/verify?email=success@simulator.amazonses.com&token={{ verificationToken }}'
          auth:
            user: application
            pass: secret
          capture:
            - json: $.email.address
              as: email
            - json: $.email.verified
              as: verified
          expect:
            - statusCode: 200
            - hasProperty: creationTime
            - hasProperty: lastUpdateTime
            - equals:
                - "{{ email }}"
                - "success@simulator.amazonses.com"
            - equals:
                - "{{ verified }}"
                - true

      # -------------
      # Update
      # -------------
      - log: "\nChecking for NOT FOUND when updating a nonexistent user..."
      - put:
          url: '/users?email=test@test.com'
          headers:
            password: 5f4dcc3b5aa765d61d8327deb882cf99
          auth:
            user: application
            pass: secret
          json:
            email:
              address: success@simulator.amazonses.com
            password: 5f4dcc3b5aa765d61d8327deb882cf99
            uniqueID: ABC123
            attributes:
              - hello
              - world
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 404
            - equals:
                - "{{ errorString }}"
                - "User test@test.com not found in the database."

      - log: "\nChecking for NOT FOUND when updating a nonexistent user..."
      - put:
          url: '/users'
          headers:
            password: incorrectPassword
          auth:
            user: application
            pass: secret
          json:
            email:
              address: success@simulator.amazonses.com
            password: 5f4dcc3b5aa765d61d8327deb882cf99
            uniqueID: ABC123
            attributes:
              - hello
              - world
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 401
            - equals:
                - "{{ errorString }}"
                - "Unable to validate user with provided credentials."

      - log: "\nAttempting to update the unique ID property..."
      - put:
          url: '/users'
          headers:
            password: 5f4dcc3b5aa765d61d8327deb882cf99
          auth:
            user: application
            pass: secret
          json:
            email:
              address: success@simulator.amazonses.com
              verified: true
              verificationToken: shouldNotBeWritten
            password: 5f4dcc3b5aa765d61d8327deb882cf99
            uniqueID: NEW_ID
            attributes:
              - hello
              - world
          capture:
            - json: $.email.verified
              as: verified
            - json: $.uniqueID
              as: uniqueID
            - json: $.email.verificationToken
              as: updatedVerificationToken
            - json: $.creationTime
              as: creationUpdate
          expect:
            - statusCode: 200
            - equals:
                - "{{ verified }}"
                - true
            - equals:
                - "{{ uniqueID }}"
                - NEW_ID
            - equals:
                - "{{ updatedVerificationToken }}"
                - "{{ verificationToken }}"
            - equals:
                - "{{ creationUpdate }}"
                - "{{ creationOriginal }}"

      - log: "\nAttempting to update the email..."
      - put:
          url: '/users?email=success@simulator.amazonses.com'
          headers:
            password: 5f4dcc3b5aa765d61d8327deb882cf99
          auth:
            user: application
            pass: secret
          json:
            email:
              address: newemail@gmail.com
              verified: true
              verificationToken: shouldNotBeWritten
            password: 5f4dcc3b5aa765d61d8327deb882cf99
            uniqueID: NEW_ID
            attributes:
              - hello
              - world
          capture:
            - json: $.email.verified
              as: verified
            - json: $.email.address
              as: email
            - json: $.email.verificationToken
              as: updatedVerificationToken
            # TODO should creationTime stay the same when updating email?
            # TODO right now we are updating it
            - json: $.creationTime
              as: creationOriginal
          expect:
            - statusCode: 200
            - equals:
                - "{{ verified }}"
                - false
            - equals:
                - "{{ email }}"
                - "newemail@gmail.com"
            - equals:
                - "{{ updatedVerificationToken }}"
                - ""

      # -------------
      # Delete
      # -------------
      - log: "\nChecking for NOT FOUND when deleting a nonexistent user..."
      - delete:
          url: '/users?email=test@test.com'
          headers:
            password: test
          auth:
            user: application
            pass: secret
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 404
            - equals:
                - "{{ errorString }}"
                - "User test@test.com not found in the database."

      - log: "\nChecking for UNAUTHORIZED when deleting a user with an incorrect password..."
      - delete:
          url: '/users?email=newemail@gmail.com'
          headers:
            password: incorrectPassword
          auth:
            user: application
            pass: secret
          capture:
            regexp: .+
            as: errorString
          expect:
            - statusCode: 401
            - equals:
                - "{{ errorString }}"
                - "Unable to validate user with provided credentials."

      - log: "\nAttempting to delete the user..."
      - delete:
          url: '/users?email=newemail@gmail.com'
          headers:
            password: 5f4dcc3b5aa765d61d8327deb882cf99
          auth:
            user: application
            pass: secret
          capture:
            - json: $.email.address
              as: email
            - json: $.creationTime
              as: creationDelete
          expect:
            - statusCode: 200
            - hasProperty: creationTime
            - hasProperty: lastUpdateTime
            - equals:
                - "{{ email }}"
                - "newemail@gmail.com"
            - equals:
                - "{{ creationDelete }}"
                - "{{ creationOriginal }}"

      # -------------
      # Swagger
      # -------------
      - log: "\nReading the generated Swagger JSON..."
      - get:
          url: '/openapi.json'
          capture:
            - json: $.info.title
              as: title
            - json: $.info.description
              as: description
          expect:
            - statusCode: 200
            - equals:
                - "{{ title }}"
                - Thunder API
            - equals:
                - "{{ description }}"
                - A fully customizable user management REST API

      - log: "\nReading the generated Swagger YAML..."
      - get:
          url: '/openapi.yaml'
          expect:
            - statusCode: 200

      - log: "\nReading the generated Swagger UI HTML..."
      - get:
          url: '/swagger'
          expect:
            - statusCode: 200

      # -------------
      # Metrics
      # -------------
      - log: "\nVerifying metrics were updated correctly?: {{ testMetrics }}"
      - get:
          url: 'http://localhost:8081/metrics'
          ifTrue: "testMetrics"
          capture:
            - json: $.meters["com.sanctionco.thunder.resources.UserResource.delete-requests"].count
              as: deleteRequestCount
            - json: $.meters["com.sanctionco.thunder.resources.UserResource.get-requests"].count
              as: getRequestCount
            - json: $.meters["com.sanctionco.thunder.resources.UserResource.post-requests"].count
              as: postRequestCount
            - json: $.meters["com.sanctionco.thunder.resources.UserResource.update-requests"].count
              as: updateRequestCount
            - json: $.meters["com.sanctionco.thunder.resources.VerificationResource.reset-verification-requests"].count
              as: resetVerificationRequestCount
            - json: $.meters["com.sanctionco.thunder.resources.VerificationResource.send-email-requests"].count
              as: sendEmailRequestCount
            - json: $.meters["com.sanctionco.thunder.resources.VerificationResource.verify-email-requests"].count
              as: verifyEmailRequestCount
            - json: $.meters["com.sanctionco.thunder.openapi.SwaggerResource.swagger-ui-requests"].count
              as: swaggerUIRequestCount
            - json: $.counters["com.sanctionco.thunder.email.EmailService.email-send-success"].count
              as: emailSendSuccessCount
          expect:
            - statusCode: 200
            - equals:
                - "{{ deleteRequestCount }}"
                - 3
            - equals:
                - "{{ getRequestCount }}"
                - 4
            - equals:
                - "{{ postRequestCount }}"
                - 2
            - equals:
                - "{{ updateRequestCount }}"
                - 4
            - equals:
                - "{{ resetVerificationRequestCount }}"
                - 3
            - equals:
                - "{{ sendEmailRequestCount }}"
                - 4
            - equals:
                - "{{ verifyEmailRequestCount }}"
                - 4
            - equals:
                - "{{ swaggerUIRequestCount }}"
                - 1
            - equals:
                - "{{ emailSendSuccessCount }}"
                - 2

      # -------------
      # Health checks
      # -------------
      - log: "\nVerifying health of the application..."
      - get:
          url: 'http://localhost:8081/healthcheck'
          capture:
            - json: $.Database.healthy
              as: dbHealth
            - json: $.Email.healthy
              as: emailHealth
            - json: $.deadlocks.healthy
              as: deadlockHealth
          expect:
            - statusCode: 200
            - equals:
                - "{{ dbHealth }}"
                - true
            - equals:
                - "{{ emailHealth }}"
                - true
            - equals:
                - "{{ deadlockHealth }}"
                - true
