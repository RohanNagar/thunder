name: CI

# The following is a list of dependency versions used in this workflow.

# Actions:
# actions/cache@v2.1.4
# actions/checkout@v2
# actions/create-release@v1
# actions/download-artifact@v2
# actions/setup-go@v2
# actions/setup-java@v1
# actions/upload-artifact@v2
# actions/upload-release-asset@v1
# azure/setup-helm@v1
# azure/setup-kubectl@v1
# codecov/codecov-action@v1.3.1
# docker/build-push-action@v1
# engineerd/configurator@v0.0.6
# helm/kind-action@v1.1.0
# pascalgn/automerge-action@v0.13.1

# Other:
# Go: 1.16.2
# Helm: v3.5.3
# Kind: v0.10.0
# Kubeconform: v0.4.6
# Kubernetes: 1.20.5
# Java: 16

# Run CI on master branch or on pull requests that target master
on:
  push:
    branches: [ master ]
    tags: '*'
  pull_request:
    branches: [ master ]

jobs:
  # Run linters on various non-Java files (node and shell)
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Install npm packages
      run: npm --prefix scripts/ install

    - name: Lint Node.js code
      run: npm --prefix scripts/ run lint

    - name: Shellcheck
      run: shellcheck scripts/**/*.sh

  # Run validations on the thunder Helm chart
  helm:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up helm
        uses: azure/setup-helm@v1
        with:
          version: v3.5.3

      - name: Set up Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.16.2'

      - name: Download kubeconform
        uses: engineerd/configurator@v0.0.6
        with:
          name: "kubeconform"
          url: "https://github.com/yannh/kubeconform/releases/download/v0.4.6/kubeconform-linux-amd64.tar.gz"
          pathInArchive: "kubeconform"

      - name: Helm lint
        run: helm lint scripts/deploy/helm/thunder

      - name: Validate with kubeconform
        run: helm template scripts/deploy/helm/thunder | kubeconform -kubernetes-version 1.20.5 -summary

      - name: Run Terratests
        run: (cd scripts/deploy/helm/test; go test -v)

  # Run the maven build
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 16
        
    - name: Cache dependencies
      uses: actions/cache@v2.1.4
      with:
        path: |
          ~/.m2/repository
          scripts/node_modules
        key: ${{ runner.os }}-maven-node-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-node-
    - name: Install npm packages
      run: npm --prefix scripts/ install

    - name: Build with Maven
      run: mvn package jacoco:report

    - name: Upload Codecov report
      uses: codecov/codecov-action@v1.3.1
      with:
        directory: .

    - name: Run itegration tests without Docker
      run: sh -c scripts/tools/integration-tests.sh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: thunder-artifacts
        path: application/target

  integration-test:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        testname: [general, mongodb, update-existing-email, disabled-email, bcrypt, sha256, disabled-password-header]
    
    steps:
      - uses: actions/checkout@v2
      - name: Download Thunder artifacts
        uses: actions/download-artifact@v2
        with:
          name: thunder-artifacts
          path: application/target

      - name: Install npm packages
        run: npm --prefix scripts/ install
      
      - name: Run test
        run: ./scripts/ci/docker-integration-tests.sh ${{ matrix.testname }}
  
  release-edge:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [integration-test]
    
    steps:
      - uses: actions/checkout@v2
      - name: Download Thunder artifacts
        uses: actions/download-artifact@v2
        with:
          name: thunder-artifacts
          path: application/target

      - name: Push edge to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: rohannagar/thunder/thunder
          tags: edge

      - name: Push edge to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: rohannagar/thunder
          tags: edge

  # Test that our Helm chart deploys as expected with the latest edge image
  test-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    needs: [release-edge]

    steps:
      - uses: actions/checkout@v2

      - name: Set up kubectl
        uses: azure/setup-kubectl@v1

      - name: Set up helm
        uses: azure/setup-helm@v1
        with:
          version: v3.5.3

      - name: Create kind cluster
        uses: helm/kind-action@v1.1.0
        with:
          version: v0.10.0

      - name: Print cluster info
        run: kubectl cluster-info --context kind-chart-testing

      - name: Install chart
        run: helm install thunder scripts/deploy/helm/thunder --wait --timeout 1m

      - name: Show running pods
        run: kubectl get pods

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [integration-test]
    
    steps:
      - uses: actions/checkout@v2
      - name: Download Thunder artifacts
        uses: actions/download-artifact@v2
        with:
          name: thunder-artifacts
          path: application/target

      - name: Set tag number
        id: tag
        run: echo ::set-output name=tag_name::${GITHUB_REF#refs/tags/v}
      
      - name: Push image to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: rohannagar/thunder
          tags: ${{ steps.tag.outputs.tag_name }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          
      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: application/target/application-${{ steps.tag.outputs.tag_name }}.jar
          asset_name: application-${{ steps.tag.outputs.tag_name }}.jar
          asset_content_type: application/java-archive

  merge-dependabot:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && (github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]')
    needs: [integration-test]

    steps:
      - name: Auto merge
        uses: pascalgn/automerge-action@v0.13.1
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""
          MERGE_METHOD: "squash"
          MERGE_DELETE_BRANCH: true

env:
  # Dummy keys to use the AWS SDK
  AWS_ACCESS_KEY_ID: 1234567890
  AWS_SECRET_ACCESS_KEY: 1234567890
