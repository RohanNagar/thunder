name: CI

# Run CI on master branch or on pull requests that target master
on:
  push:
    branches: [ master ]
    tags: '*'
  pull_request:
    branches: [ master ]

jobs:
  # Run linters on various non-Java files
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2

    - name: Install npm packages
      run: npm --prefix scripts/ install

    - name: Lint Node.js code
      run: npm --prefix scripts/ run lint

    - name: Shellcheck
      run: shellcheck scripts/**/*.sh

    - name: Helm lint
      uses: stefanprodan/kube-tools@v1.5.0
      with:
        helm: 2.16.10
        command: |
          helm lint scripts/deploy/helm/thunder
  # Run the maven build
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 11
        
    - name: Cache dependencies
      uses: actions/cache@v2.1.1
      with:
        path: |
          ~/.m2/repository
          scripts/node_modules
        key: ${{ runner.os }}-maven-node-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-node-
    - name: Install npm packages
      run: npm --prefix scripts/ install

    - name: Build with Maven
      run: mvn package jacoco:report

    - name: Upload Codecov report
      uses: codecov/codecov-action@v1
      with:
        directory: .

    - name: Run itegration tests without Docker
      run: sh -c scripts/tools/integration-tests.sh

    - name: Upload build artifacts
      uses: actions/upload-artifact@v2
      with:
        name: thunder-artifacts
        path: application/target

  integration-test:
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
      - uses: actions/checkout@v2
      - name: Download Thunder artifacts
        uses: actions/download-artifact@v2
        with:
          name: thunder-artifacts
          path: application/target

      - name: Install npm packages
        run: npm --prefix scripts/ install
      
      - name: Run general test
        run: ./scripts/ci/docker-integration-tests.sh general

      - name: Run general mongodb test
        run: ./scripts/ci/docker-integration-tests.sh mongodb

      - name: Run update-existing-email test
        run: ./scripts/ci/docker-integration-tests.sh update-existing-email

      - name: Run disabled-email test
        run: ./scripts/ci/docker-integration-tests.sh disabled-email

      - name: Run bcrypt test
        run: ./scripts/ci/docker-integration-tests.sh bcrypt

      - name: Run md5 test
        run: ./scripts/ci/docker-integration-tests.sh sha256

      - name: Run disabled-password-header test
        run: ./scripts/ci/docker-integration-tests.sh disabled-password-header
  
  release-edge:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    needs: [integration-test]
    
    steps:
      - uses: actions/checkout@v2
      - name: Download Thunder artifacts
        uses: actions/download-artifact@v2
        with:
          name: thunder-artifacts
          path: application/target

      - name: Push edge to GitHub Packages
        uses: docker/build-push-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: docker.pkg.github.com
          repository: rohannagar/thunder/thunder
          tags: edge

      - name: Push edge to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: rohannagar/thunder
          tags: edge

  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [integration-test]
    
    steps:
      - uses: actions/checkout@v2
      - name: Download Thunder artifacts
        uses: actions/download-artifact@v2
        with:
          name: thunder-artifacts
          path: application/target

      - name: Set tag number
        id: tag
        run: echo ::set-output name=tag_name::${GITHUB_REF#refs/tags/v}
      
      - name: Push image to Docker Hub
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          repository: rohannagar/thunder
          tags: ${{ steps.tag.outputs.tag_name }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          
      - name: Upload JAR to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: application/target/application-${{ steps.tag.outputs.tag_name }}.jar
          asset_name: application-${{ steps.tag.outputs.tag_name }}.jar
          asset_content_type: application/java-archive

  merge-dependabot:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master' && (github.actor == 'dependabot[bot]' || github.actor == 'dependabot-preview[bot]')
    needs: [integration-test]

    steps:
      - name: Auto approve
        uses: hmarr/auto-approve-action@v2.0.0
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Auto merge
        uses: pascalgn/automerge-action@v0.9.0
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MERGE_LABELS: ""
          MERGE_METHOD: "squash"
          MERGE_DELETE_BRANCH: true

env:
  # Dummy keys to use the AWS SDK
  AWS_ACCESS_KEY_ID: 1234567890
  AWS_SECRET_ACCESS_KEY: 1234567890
